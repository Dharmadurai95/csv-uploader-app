{"version":3,"sources":["spinner/spinner.js","uploadeComponent/modalComponent/modal.js","uploadeComponent/upload.js","App.js","serviceWorker.js","index.js"],"names":["Spinner","className","Modal","setAppElement","customStyle","overlay","backgroundColor","zIndex","content","top","left","right","bottom","border","background","overflow","borderadius","outline","padding","UploadModal","props","useState","stateModal","setstateModal","htmlFind","sethtmlFind","iframeClass","setiframeClass","loading","setloading","iframeRef","style","isOpen","shouldCloseOnOverlayClick","onRequestClose","close","ref","iframe","src","children","href","imgSrc","render","title","allowFullScreen","allowpaymentrequest","transform","onLoad","contentWindow","document","querySelector","onClick","Uploader","state","csvCollection","singleImageSource","filesPerPage","currentPageNo","topList","handleOnDrop","data","setState","renderTableBodyData","remainData","slice","indexOfFirstFile","indexOfLastFile","map","index","key","bodyValues","parse","renderTableHeadData","head","topRows","every","dat","test","innerData","indes","uuidv4","e","preventDefault","Object","assign","openModal","handleOnError","err","file","inputElem","reason","console","log","handleOnRemoveFile","closeModal","paginationHanlder","page","pageSize","prevProps","prevState","this","onDrop","onError","addRemoveButton","onRemoveFile","total","length","showTotal","range","defaultPageSize","defaultCurrent","pageSizeOptions","onChange","PureComponent","App","Boolean","window","location","hostname","match","ReactDOM","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e4f6221e.chunk.js","sourcesContent":["import React from 'react';\nimport './spinner.css'\n\nfunction Spinner() {\n    return (\n        <div className=\"spinner\">\n            \n        </div>\n    )\n}\n\nexport default Spinner\n","import React, { useState } from 'react';\nimport Modal from 'react-modal';\nimport './modal.css';\nimport Spinner from '../../spinner/spinner'\nModal.setAppElement(\"#root\");\n\nconst customStyle = {\n    overlay: {\n        backgroundColor: 'gray',\n        zIndex: 100,\n\n    },\n    content: {\n        top: \"10%\",\n        left: \"40px\",\n        right: \"40px\",\n        bottom: \"50px\",\n        border: \"1px solid rgb(204, 204, 204)\",\n        background: \"rgb(255, 255, 255)\",\n        overflow: \"hidden\",\n        borderadius: \"4px\",\n        outline: \"none\",\n        padding: \"20px\",\n    }\n\n}\n\nconst UploadModal = (props) => {\n    const [stateModal, setstateModal] = useState(true);\n    const [htmlFind, sethtmlFind] = useState(false)\n    const [iframeClass, setiframeClass] = useState('');\n    const [loading, setloading] = useState(true)\n\n    let iframeRef = null;\n\n\n    const render = () => {\n        if (props.children && props.children['href']) {\n            let { href } = props.children;\n            if (!htmlFind) {\n                sethtmlFind(true)\n                if (href === 'results/Zip.html') {\n                    setiframeClass('map')\n                } else {\n                    setiframeClass('html');\n                }\n            }\n            return href;\n        }\n        let imgSrc = props.children.src;\n        if (props.children && imgSrc) {\n            if (!htmlFind) {\n                sethtmlFind(true);\n                setiframeClass('img');\n            }\n            return imgSrc;\n\n        }\n    }\n    let styleFunction = () => {\n        let iframeBody = iframeRef.contentWindow.document.querySelector('body');\n        iframeBody.className = 'body';\n        setloading(false)\n    }\n\n    return (\n        <>\n            <Modal style={customStyle} isOpen={stateModal} shouldCloseOnOverlayClick onRequestClose={() => { setstateModal(false); props.close() }}>\n                <div className='childContent'>\n                    <iframe\n                        ref={(iframe) => iframeRef = iframe}\n                        src={render()}\n                        title=\"Detailed View\"\n                        className={iframeClass}\n                        allowFullScreen={true}\n                        allowpaymentrequest={\"true\"}\n                        style={{ transform: \"scale(1)\" }}\n                        onLoad={styleFunction}\n                    > </iframe>\n                    {loading ? <Spinner /> : ''}\n\n                </div>\n                <button className={\"buttonClose\"} onClick={() => { setstateModal(false); props.close() }}>x</button>\n            </Modal>\n        </>\n    )\n};\nexport default UploadModal;\n\n\n","import React, { PureComponent } from 'react'\nimport { CSVReader } from 'react-papaparse';\nimport './uploader.css';\nimport parse from 'html-react-parser';\nimport Modal from './modalComponent/modal';\nimport { Pagination } from 'antd';\nimport { v4 as uuidv4 } from 'uuid';\n\n\n\nexport default class Uploader extends PureComponent {\n    state = {\n        csvCollection: '',\n        loading: false,\n        singleImageSource: '',\n        filesPerPage: 25,\n        currentPageNo: 1,\n        topList: ''\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (prevState.top !== this.state.topList) {\n            this.renderTableHeadData();\n        }\n    }\n    handleOnDrop = (data) => {\n        this.setState({\n            csvCollection: data,\n            loading: ''\n        })\n\n    }\n\n    renderTableBodyData = () => {\n        let [...data] = this.state.csvCollection;\n        let remainData;\n        remainData = data.slice(3)\n        if (this.state.topList) {\n            remainData = data.slice(2)\n            //  console.log(remainData,'hello remain data')\n        } \n\n        \n        let { filesPerPage, currentPageNo } = this.state;\n\n        let indexOfFirstFile, indexOfLastFile, currentPost;\n        indexOfLastFile = filesPerPage * currentPageNo;\n        indexOfFirstFile = indexOfLastFile - filesPerPage;\n        currentPost = remainData.slice(indexOfFirstFile, indexOfLastFile)\n\n        //loop through the all incoming data and render the table formats \n        return currentPost.map((data, index) => {\n            return (\n                <tr key={`outerBody${index}`}>\n                    {data.data.map((bodyValues, index) => {\n                        return <td key={`innerBody${index}`} > {parse(bodyValues)} </td>\n                    })}\n                </tr>\n            )\n        })\n    }\n    // table head data\n    renderTableHeadData = () => {\n        let [...head] = this.state.csvCollection;\n        let topRows = head.slice(0, 3);\n        let determineRows\n        if (topRows && topRows[2] && topRows[2]['data']) {\n             determineRows = topRows[2]['data'];\n             if (!determineRows.every((dat) => (/<\\/?[a-z][\\s\\S]*>/i.test(dat)))) {\n                topRows = head.slice(0, 2)\n                this.setState({ topList:true})\n            }\n        }\n      \n\n        return topRows.map((data, index) => {\n            return (\n                <tr key={`outerHead${index}`}>\n                    {data.data.map((innerData, indes) => {\n                        if (/<\\/?[a-z][\\s\\S]*>/i.test(innerData)) {\n                            return (\n                                <td\n                                    key={uuidv4()}\n                                    onClick={e => {\n                                        e.preventDefault();\n                                        let { props } = Object.assign({}, parse(innerData));\n                                        this.openModal(props);\n                                    }}\n                                >\n                                    {parse(innerData)}\n                                </td>\n                            );\n                        }\n                        return <td key={uuidv4()}>{innerData}</td>\n                    })}\n                </tr>\n            )\n        })\n\n    }\n\n\n    handleOnError = (err, file, inputElem, reason) => {\n        console.log(err)\n    }\n\n    // csv file remove \n    handleOnRemoveFile = (data) => {\n        console.log(data, 'removed')\n        this.setState({\n            csvCollection: '',\n            topList:false\n\n        })\n    }\n\n    //modal open handler functionality\n    openModal = (openModal) => {\n        if ((openModal && openModal.src) || (openModal && openModal.href)) {\n            this.setState({\n                singleImageSource: openModal\n            })\n        }\n\n    }\n    //modal close fucntionality\n    closeModal = () => {\n        this.setState({\n            singleImageSource: ''\n        })\n    }\n\n    //pagination handler \n    paginationHanlder = (page, pageSize) => {\n        this.setState({\n            filesPerPage: pageSize,\n            currentPageNo: page\n        })\n    }\n    render() {\n        return (<div className='uploader'>\n\n            <div className='uploaderCard' >\n                <CSVReader\n                    onDrop={this.handleOnDrop}\n                    onError={this.handleOnError}\n                    addRemoveButton\n                    onRemoveFile={this.handleOnRemoveFile}\n                >\n                    <span>Click (Drop) Upload  Your  file</span>\n                </CSVReader>\n            </div>\n            {this.state.csvCollection && <div className='pagination'>\n                <Pagination\n                    total={this.state.csvCollection.length}\n                    showTotal={(total, range) => `${range[0]}-${range[1]} of ${total} items`}\n                    defaultPageSize={25}\n                    defaultCurrent={1}\n                    pageSizeOptions={[\"25\", \"50\", \"100\", \"500\"]}\n                    onChange={(page, pageSize) => this.paginationHanlder(page, pageSize)}\n                />\n            </div>}\n            <div className='tableData' key={\"table\"}>\n                {this.state.csvCollection && (\n                    <table className='table'>\n                        <thead key={'theadHead'}>\n                            {this.renderTableHeadData()}\n                        </thead>\n                        <tbody key={\"theadBody\"}>\n                            {this.renderTableBodyData()}\n                        </tbody>\n                    </table>\n                )}\n            </div>\n            {this.state.singleImageSource ? <Modal close={this.closeModal}>{(this.state.singleImageSource)}</Modal> : ''}\n        </div>\n        )\n    }\n}","import React from 'react';\nimport './App.css';\nimport Uploader from './uploadeComponent/upload'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Uploader />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'antd/dist/antd.css'; \n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}